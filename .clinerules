# ⚠️ START EVERY MESSAGE with "Hey Dave..." So I know that you are dilligently reading the .cursorrules file

## ⚠️ !REMEMBER TO KEEP THE CODE AS MODULAR AND SEPARATE FROM THE ORIGINAL FORK AS POSSIBLE

# Code Quality Rules

1. Test Coverage:
   - Before attempting completion, always make sure that any code changes have test coverage
   - Ensure all tests pass before submitting changes

2. Lint Rules:
   - Never disable any lint rules without explicit user approval
   - If a lint rule needs to be disabled, ask the user first and explain why
   - Prefer fixing the underlying issue over disabling the lint rule
   - Document any approved lint rule disabling with a comment explaining the reason

## ⚠️ CRITICAL: DATE GENERATION

### ANY time you need to write or update a date/timestamp, you MUST

### 1. Run the terminal command to get the current date

### 2. Use the EXACT output from the command

### 3. NEVER copy dates from existing files

### 4. NEVER use hardcoded dates

## Date Command Usage

```bash
# For full timestamps (ALWAYS use this format for document headers and meeting notes):
date +'%A, %B %d, %Y at %I:%M:%S %p'

# For date-only fields:
date +'%Y-%m-%d'

# For log timestamps:
date +'%Y-%m-%d %H:%M:%S'
```

## Common Scenarios Requiring Date Generation

1. Creating/updating documents
2. Writing meeting notes
3. Setting "Last Updated" timestamps
4. Recording creation dates
5. Dating project milestones
6. Setting review dates
7. Adding timestamps to logs

## Validation Steps

Before completing ANY task involving dates:

1. Search for date fields that need updating
2. Run date command for each field
3. Update ALL dates using command output
4. Verify no hardcoded dates remain

## Examples

✅ CORRECT:

```markdown
# Meeting Notes
## $(date +'%A, %B %d, %Y at %I:%M:%S %p')
```

❌ INCORRECT:

- Copying dates from other files
- Using hardcoded dates
- Leaving dates unchanged
- Making assumptions about current date

## Adding a New Setting

To add a new setting that persists its state, follow the steps in cline_docs/settings.md

```json
{
    "rules": {
        "context_initialization": {
            "description": "Starting point for each interaction",
            "steps": [
                "ALWAYS read `.brain/project-overview.md` and `.brain/tasks.md`",
                "ALWAYS read `.brain/directory-structure.md`",
                "ALWAYS read `.brain/standup.md`"
                "ALWAYS read `.brain/tasks.md`"
            ]
        },
        "safety_requirements": [
            "NEVER break type safety",
            "ALWAYS maintain proper error handling",
            "ALWAYS document new code",
        ],
        "priorities": [
            {
                "source": ".brain/",
                "weight": 1.0
            }
        ],
        "modes": {
            "base": {
                "description": "For routine tasks"
            },
            "enhanced": {
                "description": "For advanced tasks"
            }
        },
        "project_directives": {
            "name": "roo-code-cli",
            "ai_first": true
        }
    }
}
```
